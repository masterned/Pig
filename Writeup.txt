Spencer Dent


Random First Player (2)
    The user may now choose to have the first player chosen at random.
By adding a private instance variable, stored in the Game object, I
kept track of the initially selected Player. I created a button
attached to a helper method to randomly select the chosen player. In
order to update the radio buttons accordingly, I chose to retroactively
check the Game object, using `instanceof` syntax to view which Player
had been selected. At first, I wanted to bind the radio buttons to the
Players' isMyTurn instance variables (so I would not have to make
retroactive checks, and the View would update on its own), but this
proved to cause more issues than it solved (at least the way I was
going to do it with SimpleBooleanProperty objects) -- requiring a
rework throughout the entire program.


New Game (4)
    The user now has the ability to start a new game after a game has
ended (and during one through the menu). I included a button that only
appears when a player has won the game, and I added a MenuItem -- with
a mnemonic & accelerator (`Alt+G+N` and `Ctrl+N` respectively) -- in
the "Game" Menu. It starts a new game as long as a player has been
chosen (the item is disabled if a player has not been chosen yet). I
added a SimpleBooleanProperty flag in the Game object to track when a
player has won the game, and I bound the "New Game" Button's visibility
to that Observable flag. Using Observable objects in this manner hides
the view from the model, allowing the view to be changed later without
needing to change the model. During this process, I also chose to
overhaul the implementation of the Menus & MenuItems.


Show All Rolls (4)
    The game now keeps track of every roll made by the player on their 
turn. Displaying the results as ListViews, I stored the roll values in
an ObservableArrayList in the Player objects. To reduce duplication, I
modified the getRollValues method in the AbstractPlayer class & Player
interface. Also, to reduce duplication, I moved much of the Players'
Panes' functionality into AbstractPlayerPane. In order to guarantee
that the most recent rolls are visible, I pushed the new values onto
the front of the ArrayList (slightly cycle intensive on large amounts
of rolls, but a better option than reversing the entire list). In order
to clear the list, I used ObservableArrayList’s built-in clear method
-- wrapped in a helper method of the Player interface. I used the
already-implemented swapWhoseTurn method in the Game class to clear the
list of rolls before the start of each player’s turn.
